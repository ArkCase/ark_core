#!/bin/bash

say() {
	echo -e "$(date -u -Isec): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

ping_server() {
	local URL="${1}"
	/usr/bin/curl -m 5 "${URL}/actuator/health" &>/dev/null
}

DEFAULT_WAIT=90
DEFAULT_URL="http://localhost:9999"

[ -v DEVELOPMENT ] || DEVELOPMENT="false"
# Sanitize to ensure proper value is consumed below
case "${DEVELOPMENT,,}" in
	true | t | yes | y | 1 | on | enable | enabled | active ) DEVELOPMENT="true" ;;
	* ) DEVELOPMENT="false" ;;
esac

# If not specifically told otherwise, wait up to
# 90 seconds for the config server to come back up
[ -v CONFIG_WAIT ] || CONFIG_WAIT=${DEFAULT_WAIT}
[ -n "${CONFIG_WAIT}" ] || CONFIG_WAIT=${DEFAULT_WAIT}
[[ ${CONFIG_WAIT} =~ ^(0|[1-9][0-9]*)$ ]] || fail "The wait period must be a number with no leading zeros [${CONFIG_WAIT}]"

[ -v CONFIG_URL ] || CONFIG_URL="${DEFAULT_URL}"
[ -n "${CONFIG_URL}" ] || fail "The config server URL must be a non-empty string [${CONFIG_URL}]"

START="$(date +%s)"
say "Starting the polling cycle"
while true ; do
	ping_server "${CONFIG_URL}" && break

	say "\tConfig server is not up yet at [${CONFIG_URL}]"
	NOW="$(date +%s)"
	[ $(( NOW - START )) -lt ${CONFIG_WAIT} ] || fail "Timed out waiting for configserver to come up at [${CONFIG_URL}]"
done

say "Config server responded - launching Tomcat"

if "${DEVELOPMENT}" ; then
	[ ${#} -gt 0 ] || set -- "-n"
	exec /usr/bin/supervisord "${@}"
fi

[ ${#} -gt 0 ] || set -- "run"
exec /app/tomcat/bin/catalina.sh "${@}"
