#!/bin/bash
set -euo pipefail

say() {
	echo -e "$(/usr/bin/date -u -Ins): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

to_boolean() {
	case "${1,,}" in
		true | t | 1 | yes | on | enabled | enable ) echo "true" ;;
		* ) echo "false" ;;
	esac
}

is_id_assigned() {
	local DB="${1}"
	local ID="${2}"
	/usr/bin/getent "${DB}" | awk -F ':' '{ print $3 }' | sort -nu | grep -q "^${ID}$" && return 0
	return 1
}

get_name() {
	local DB="${1}"
	local ID="${2}"
	IFS=":" read NAME REST < <(/usr/bin/getent "${DB}" "${ID}")
	echo "${NAME}"
}

is_uid_assigned() {
	is_id_assigned "passwd" "${1}"
	return ${?}
}

get_user_name() {
	get_name "passwd" "${1}"
}

is_gid_assigned() {
	is_id_assigned "group" "${1}"
	return ${?}
}

get_group_name() {
	get_name "group" "${1}"
}

# This is the command that we will turn into at the end ...
CMD=("${@}")

# Get the ID for the current user or the sudo user, as appropriate
CUR_UID="$(/usr/bin/id -u)" || fail "Failed to compute the current user's ID"

# If we're in development mode, we need to check if we have to swap
# UIDs using superuser magic ... if there's no swap needed, then we
# simply don't even escalate or do anything
CHANGE_UID="false"
if $(to_boolean "${DEVELOPMENT:-"false"}") ; then

	[ -v DEV_USER ] || DEV_USER="developer"
	[ -v DEV_UID ] || DEV_UID="1000"
	[[ "${DEV_UID}" =~ ^[1-9][0-9]*$ ]] || fail "The DEV_UID ${DEV_UID} is not a valid number"

	# If the current user ID is not the same as DEV_UID, we have work to do!
	[ ${CUR_UID} != ${DEV_UID} ] && CHANGE_UID="true"
fi

# So we only work our magic if/when necessary
if "${CHANGE_UID}" ; then

	# First things first: ALWAYS escalate privileges if necessary as our first step
	[ ${CUR_UID} -eq 0 ] || exec /usr/bin/sudo --non-interactive --preserve-env "PATH=${PATH}" "${0}" "${@}"

	[ -v DEV_GROUP ] || DEV_GROUP="${DEV_USER}"
	[ -v DEV_GID ] || DEV_GID="1000"
	[[ "${DEV_GID}" =~ ^[1-9][0-9]*$ ]] || fail "The DEV_GID ${DEV_GID} is not a valid number"

	# We have to do the group first, b/c it's used when creating the user...
	if is_gid_assigned "${DEV_GID}" ; then
		DEV_GROUP="$(get_group_name "${DEV_GID}")"
		say "Using the existing development group named [${DEV_GROUP}] (id=${DEV_GID})"
	else
		say "Creating a new development group named [${DEV_GROUP}] (id=${DEV_GID})"
		/usr/sbin/groupadd --gid "${DEV_GID}" "${DEV_GROUP}"
	fi

	if is_uid_assigned "${DEV_UID}" ; then
		DEV_USER="$(get_user_name "${DEV_UID}")"
		say "Using the existing development user named [${DEV_USER}] (id=${DEV_UID})"
	else
		say "Creating a new development user named [${DEV_USER}] (id=${DEV_UID})"
		/usr/sbin/useradd --uid "${DEV_UID}" --gid "${DEV_GROUP}" --groups "${ACM_GROUP},${APP_GROUP}" "${DEV_USER}"
	fi

	for n in "${APP_USER}" "${DEV_USER}" ; do
		say "Adding the user ${n} to groups ${DEV_GROUP}, ${ACM_GROUP}, and ${APP_GROUP}"
		/usr/sbin/usermod --append --groups "${DEV_GROUP},${ACM_GROUP},${APP_GROUP}" "${n}"
	done

	# We need to change our ID regardless ...
	say "Development mode is active, will run as: $(/usr/bin/id "${DEV_USER}")"
	CMD=(/usr/bin/sudo --non-interactive --preserve-env -u "${DEV_USER}" "PATH=${PATH}" "${CMD[@]}")
fi

# Do the actual deed ...
say "Launching: ${@@Q}"
exec "${CMD[@]}"
